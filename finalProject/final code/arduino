#define uart_start_index 'R'
#define uart_response_index 'K'

volatile char Stage;
volatile unsigned int lastIO;

void Stage_establishContact();
void Stage_scanAndSend();
unsigned int Module_readPortBD();
boolean Module_sendByte(char data);

void setup() {
  // put your setup code here, to run once:
  delay(50);
  Serial.begin(9600);
  Stage = 0;
  lastIO = 0b0000001111111111;
  //PD4~7
  //PB0~5
  MCUCR &= 0b11101111;
  PORTB |= 0b00111111;
  PORTD |= 0b11110000;
  DDRB &= 0b11000000;
  DDRD &= 0b00001111;
}

void loop() {
  switch (Stage)
  {
    case 0:
      Stage_establishContact();
      break;
    case 1:
      Stage_scanAndSend();
      break;
    default:
      Stage = 0;
      break;
  }
}

void Stage_scanAndSend()
{
  char picnum = 0;
  unsigned int thisIO;
  unsigned int tempIO;
  thisIO = Module_readPortBD();
  tempIO = lastIO ^ thisIO;
  tempIO &= ~thisIO;
  for (char i = 1; i < 11; i++)
  {
    if (tempIO & 0x01)
    {
      picnum = i;
    }
    tempIO = tempIO >> 1;
  }
  if (picnum == 0)
  {
    return;
  }
  if (!Module_sendByte(picnum))
  {
    Stage = 0;
  }
}

void Stage_establishContact()
{
  unsigned int i = 0;
  while (1)
  {
    Serial.write(uart_start_index);
    i = 0;
    while ((!Serial.available()) && (i < 65500))
    {
      i++;
    }
    if ((Serial.available()) && ((char)Serial.read() == uart_response_index))
    {
      while (Serial.available())
      {
        Serial.read();
      }
      Serial.write(uart_response_index);
      Stage = 1;
      return;
    }
  }
}

unsigned int Module_readPortBD()
{
  unsigned int data = 0x0000;
  data = PIND & 0b11110000;
  data += (PINB & 0b00111111) << 8;
  data = data >> 4;
  return data;
}

boolean Module_sendByte(char data)
{
  unsigned int i, j;
  i = 0;
  j = 0;
  Serial.write(data);
  while (!Serial.available())
  {
    i++;
    if (i > 65000)
    {
      i = 0;
      j++;
    }
    if (j > 3)
    {
      return false;
    }
  }
  if ((Serial.available()) && ((char)Serial.read() == uart_response_index))
  {
    while (Serial.available())
    {
      Serial.read();
    }
    return true;
  }
}
